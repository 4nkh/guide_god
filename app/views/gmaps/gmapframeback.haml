= content_for :head do
  %meta{:name => "viewport", :content => "initial-scale=1.0, user-scalable=no"}
  %meta{'http-equiv' => "content-type", :content => "text/html; charset=UTF-8"}

  :css
    html {height: auto;}
    body {height: auto;margin: 0;padding: 0;}
    #map_canvas { position: absolute; width:100%; height: 400px; bottom:0; left:0; right:0; top:50px; }
    @media print { 
      #map_canvas { width: 100%; height: 600px; } 
    }
    div.content_window{ width:350px; }
    div.content_window h1{ font-size:1.4em; color: #0000CC; font-family: 'Trebuchet MS', Helvetica, sans-serif; font-weight: bold; padding: 0px; margin: 0px; }
    div.content_window p{ font-size:1.1em; color: #000033; font-family: 'Times New Roman', Times, serif; padding:3px; margin:0px; }

  :javascript
    soundManager.url = '/swf/'; 
    soundManager.debugMode = false

  %script{:type => "text/javascript", :src => "http://www.google.com/jsapi"}
  //ROADMAP displays the normal, default 2D tiles of Google Maps.
  //SATELLITE displays photographic tiles.
  //HYBRID displays a mix of photographic tiles and a tile layer for prominent features (roads, city names).
  //TERRAIN
  %script{:type => "text/javascript", :charset => "utf-8"} google.load("maps", "3",  {other_params:"sensor=true"});
  %script{:src => "http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markermanager/src/markermanager.js"});
  //<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>
  //<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js" type="text/javascript"></script>
  %script{:src => "http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js", :type => "text/javascript"}
  //google.load("jquery", "1.4.4");    
  
  #log
  
  #map_container
    = render :partial => "gmap"


:javascript

  var auto_refresh = setInterval( 
    function(){
      $.post("#{speakers_refresh_path}", {'id': '#{params[:id]}'}, null, "script");
    },
  25000);

  function voice_output(text, pitch, voice, gender, speed, id){
    console.log("it work");
    params = 'text=' + text + '&voice=' + voice + '&gender=' + gender + '&pitch=' + pitch + '&speed=' + speed;
    soundManager.createSound({id: params, url: '/speakers/output?' + params}).play();
    //$.post('/refresh_map', {'id': id}, null, "script");
  }
  
  var logElement = document.getElementById("log");
  logElement.value = "";
  var log = function(data){
    $(data).appendTo('#log');
    console.log("Got data: " + data);
    //logElement.value += (data + "\n");
  };
  
  var jug = new Juggernaut({
    secure: ('https:' == document.location.protocol),
    host: document.location.hostname,
    port: 8080 //document.location.port
  });

  jug.on("connect", function(){ log("Connected") });
  jug.on("disconnect", function(){ log("Disconnected") });
  jug.on("reconnect", function(){ log("Reconnecting") });

  log("Subscribing to public");

  jug.subscribe("public", function(data){
    log(data);
    console.log("Got data: " + data);
  });

  // Expose for debugging
  window.jug = jug;


