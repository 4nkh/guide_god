= content_for :head do
  %meta{:name => "viewport", :content => "initial-scale=1.0, user-scalable=no"}
  %meta{'http-equiv' => "content-type", :content => "text/html; charset=UTF-8"}

  :css
    html {height: auto;}
    body {height: auto;margin: 0;padding: 0;}
    #map_canvas { position: absolute; width:100%; height: 400px; bottom:0; left:0; right:0; top:50px; }
    @media print { 
      #map_canvas { width: 100%; height: 600px; } 
    }
    div.content_window{ width:350px; }
    div.content_window h1{ font-size:1.4em; color: #0000CC; font-family: 'Trebuchet MS', Helvetica, sans-serif; font-weight: bold; padding: 0px; margin: 0px; }
    div.content_window p{ font-size:1.1em; color: #000033; font-family: 'Times New Roman', Times, serif; padding:3px; margin:0px; }

  %script{:src => "http://maps.google.com/maps/api/js?sensor=false", :type => "text/javascript"}
  %script{:src => "../assets/markers.js", :type => "text/javascript"}
  %script{:type => "text/javascript"} document.write('<script type="text/javascript" src="../assets/markermanager' + (document.location.search.indexOf('packed') > -1 ? '_packed' : '') + '.js"><' + '/script>');
  //script src="http://ajax.googleapis.com/ajax/libs/mootools/1.2.1/mootools.js"></script>
  
  :javascript
    soundManager.url = '/assets'; 
    soundManager.debugMode = false
  
    var map;
    var mgr;
    var icons = {};
    var allmarkers = [];

    function load() {                
      var myOptions = {
        zoom: 10,
        center: new google.maps.LatLng(#{ (GEO_HOME.to_s).gsub('[','').gsub(']','') }),
        mapTypeId: google.maps.MapTypeId.ROADMAP
      }
      map = new google.maps.Map(document.getElementById('map'), myOptions);

      mgr = new MarkerManager(map);
  
      google.maps.event.addListener(mgr, 'loaded', function(){
        setupOfficeMarkers();
        google.maps.event.addListener(map, 'zoom_changed', function() {
          updateStatus(mgr.getMarkerCount(map.getZoom()));
        });
      });                
    }

    function getIcon(images) {
      var icon = false;
      if (images) {
        if (icons[images[0]]) {
          icon = icons[images[0]];
        } else {                    
            var iconImage = new google.maps.MarkerImage('/assets/' + images[0] + '.png',
              new google.maps.Size(iconData[images[0]].width, iconData[images[0]].height),
              new google.maps.Point(0,0),
              new google.maps.Point(0, 32));
        
            var iconShadow = new google.maps.MarkerImage('/assets/taxi-icon.png', //images/' + images[1] + '.png',
              new google.maps.Size(iconData[images[1]].width, iconData[images[1]].height),
              new google.maps.Point(0,0),
              new google.maps.Point(0, 32));
        
            var iconShape = {
              coord: [1, 1, 1, 32, 32, 32, 32, 1],
              type: 'poly'
            };

            icons[images[0]] = {
              icon : iconImage,
              shadow: iconShadow,
              shape : iconShape
            };
        }
      }
      return icon;
    }

    function setupOfficeMarkers() {
     console.log(officeLayer);
      allmarkers.length = 0;
      for (var i in officeLayer) {
        if (officeLayer.hasOwnProperty(i)) {
          var layer = officeLayer[i];
      
          var markers = [];
          for (var j in layer["places"]) {
            if (layer["places"].hasOwnProperty(j)) {
              var place = layer["places"][j];
              var icon = getIcon(place["icon"]);
          
              var title = place["name"];
              var posn = new google.maps.LatLng(place["posn"][0], place["posn"][1]);
              var marker = createMarker(posn, title, getIcon(place["icon"]));
              markers.push(marker);
              allmarkers.push(marker);
            }
          }
          mgr.addMarkers(markers, layer["zoom"][0], layer["zoom"][1]);
        }
    
      }
      mgr.refresh();
      updateStatus(mgr.getMarkerCount(map.getZoom()));
    }

    function createMarker(posn, title, icon) {
      var markerOptions = {
        position: posn,
        title: title
      };
      if(icon !== false){
        markerOptions.shadow = icon.shadow;
        markerOptions.icon   = icon.icon;
        markerOptions.shape  = icon.shape;
      }
    
      var marker = new google.maps.Marker(markerOptions);

      google.maps.event.addListener(marker, 'dblclick', function() {
        mgr.removeMarker(marker)
        updateStatus(mgr.getMarkerCount(map.getZoom()));
      });
      return marker;
    }

    function showMarkers() {
      mgr.show();
      updateStatus(mgr.getMarkerCount(map.getZoom()));
    }

    function hideMarkers() {
      mgr.hide();
      updateStatus(mgr.getMarkerCount(map.getZoom()));
    }

    function deleteMarker() {
      var markerNum = parseInt(document.getElementById("markerNum").value);
      mgr.removeMarker(allmarkers[markerNum]);
      updateStatus(mgr.getMarkerCount(map.getZoom()));
    }

    function clearMarkers() {
      mgr.clearMarkers();
      updateStatus(mgr.getMarkerCount(map.getZoom()));
    }

    function reloadMarkers() {
      setupOfficeMarkers();
    }

    function updateStatus(html) {
      document.getElementById("status").innerHTML = html;
    }
            
#log

%input{:type => "button", :onclick => "deleteMarker()", :value => "delete marker #:"} &nbsp;
%input{:type => "text", :id => "markerNum", :value => "0", :size => "3"}  &nbsp;
%input{:type => "button", :onclick => "clearMarkers()", :value => "clear all markers"}  &nbsp;
%input{:type => "button", :onclick => "reloadMarkers()", :value => "reload all markers"}  &nbsp;
%input{:type => "button", :onclick => "showMarkers()", :value => "show all markers"}  &nbsp;
%input{:type => "button", :onclick => "hideMarkers()", :value => "hide all markers"}
%input{:type => "button", :onclick => "mgr.toggle()", :value => "toggle markers"}
%br
#map{:style => "width: 600px; height: 400px;"}
#status

:javascript

  var auto_refresh = setInterval( 
    function(){
      $.post("#{speakers_refresh_path}", {'id': '#{params[:id]}'}, null, "script");
    },
  25000);

  function voice_output(text, pitch, voice, gender, speed, id){
    console.log("it work");
    params = 'text=' + text + '&voice=' + voice + '&gender=' + gender + '&pitch=' + pitch + '&speed=' + speed;
    soundManager.createSound({id: params, url: '/speakers/output?' + params}).play();
    //$.post('/refresh_map', {'id': id}, null, "script");
  }
  
  var logElement = document.getElementById("log");
  logElement.value = "";
  var log = function(data){
    $(data).appendTo('#log');
    console.log("Got data: " + data);
    //logElement.value += (data + "\n");
  };
  
  var jug = new Juggernaut({
    secure: ('https:' == document.location.protocol),
    host: document.location.hostname,
    port: 8080 //document.location.port
  });

  jug.on("connect", function(){ log("Connected") });
  jug.on("disconnect", function(){ log("Disconnected") });
  jug.on("reconnect", function(){ log("Reconnecting") });

  log("Subscribing to public");

  jug.subscribe("public", function(data){
    log(data);
    console.log("Got data: " + data);
  });

  // Expose for debugging
  window.jug = jug;
